package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.33

import (
	"context"
	"fmt"
	"os"
	"time"

	"github.com/Rashad-Muntar/println/config"
	"github.com/Rashad-Muntar/println/graph/model"
	"github.com/Rashad-Muntar/println/models"
	jwt "github.com/golang-jwt/jwt/v5"
	"golang.org/x/crypto/bcrypt"
)

// Signup is the resolver for the signup field.
func (r *mutationResolver) Signup(ctx context.Context, input model.NewUser) (*models.User, error) {
	bcryptPassword, err := bcrypt.GenerateFromPassword([]byte(input.Password), bcrypt.DefaultCost)
	if err != nil {
		return nil, err
	}
	user := models.User{
		Username: input.Username,
		Email:    input.Email,
		Password: string(bcryptPassword),
	}

	newUser := config.DB.Create(&user)
	if newUser.Error != nil {
		return nil, newUser.Error
	}
	return &user, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginUser) (string, error) {
	var user models.User

	config.DB.First(&user, "email = ?", input.Email)
	if user.Id == 0 {
		return "User not found", nil
	}
	checkPass := bcrypt.CompareHashAndPassword([]byte(user.Password), []byte(input.Password))

	if checkPass != nil {
		return "Password does not match", nil
	}
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{
		"sub": user.Id,
		"exp": time.Now().Add(time.Hour * 24 * 30).Unix(),
	})
	tokenString, err := token.SignedString([]byte(os.Getenv("JWT_SECRET")))
	if err != nil {
		return "Ooops try again", err
	}

	return tokenString, nil
}

// CreateJob is the resolver for the createJob field.
func (r *mutationResolver) CreateJob(ctx context.Context, input model.NewJob) (*models.Job, error) {
	job := models.Job{
		UserID:      input.UserID,
		Description: *input.Description,
		OnGoing:     input.OnGoing,
		Completed:   input.Completed,
		File:        input.File,
	}

	newJob := config.DB.Create(&job)
	if newJob.Error != nil {
		return nil, newJob.Error
	}
	return &job, nil
}

// DeleteJob is the resolver for the deleteJob field.
func (r *mutationResolver) DeleteJob(ctx context.Context, id int) (string, error) {
	config.DB.Where("name = ?", "jinzhu").Delete(id)
	return "Job deleted", nil
}

// UpdateJob is the resolver for the updateJob field.
func (r *mutationResolver) UpdateJob(ctx context.Context, id int, input model.NewJob) (*models.Job, error) {
	job := models.Job{
		File:        input.File,
		Description: *input.Description,
	}
	config.DB.Model(&job).Where("id = ?", id).Updates(job)
	return &job, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*models.User, error) {
	var users []*models.User
	config.DB.Find(&users)
	return users, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id int) (*models.User, error) {
	var user models.User
	config.DB.First(&user, id)
	return &user, nil
}

// Jobs is the resolver for the jobs field.
func (r *queryResolver) Jobs(ctx context.Context) ([]*models.Job, error) {
	var jobs []*models.Job
	config.DB.Find(&jobs)
	return jobs, nil
}

// Job is the resolver for the job field.
func (r *queryResolver) Job(ctx context.Context, id int) (*models.Job, error) {
	var job models.Job
	config.DB.First(&job, id)
	return &job, nil
}

// Jobs is the resolver for the jobs field.
func (r *userResolver) Jobs(ctx context.Context, obj *models.User) ([]*models.Job, error) {
	panic(fmt.Errorf("not implemented: Jobs - jobs"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *jobResolver) OnGoing(ctx context.Context, obj *models.Job) (bool, error) {
	panic(fmt.Errorf("not implemented: OnGoing - onGoing"))
}
func (r *jobResolver) Completed(ctx context.Context, obj *models.Job) (bool, error) {
	panic(fmt.Errorf("not implemented: Completed - completed"))
}

type jobResolver struct{ *Resolver }
