package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.33

import (
	"context"

	"github.com/Rashad-Muntar/println/config"
	"github.com/Rashad-Muntar/println/graph/model"
	"github.com/Rashad-Muntar/println/models"
)

// Signup is the resolver for the signup field.
func (r *mutationResolver) Signup(ctx context.Context, input model.NewUser) (*models.User, error) {
	user := models.User{
		Username: input.Username,
		Email:    input.Email,
		Password: input.Password,
	}
	newUser := config.DB.Create(&user)
	if newUser.Error != nil {
		return nil, newUser.Error
	}
	return &user, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*models.User, error) {
	var users []*models.User
	config.DB.Find(&users)
	return users, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
