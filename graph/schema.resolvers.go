package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.33

import (
	// "bytes"
	"context"
	"fmt"
	"io/ioutil"
	"log"
	"math/rand"
	"os"
	"time"

	"github.com/Rashad-Muntar/println/config"
	"github.com/Rashad-Muntar/println/graph/model"
	"github.com/Rashad-Muntar/println/models"
	"github.com/Rashad-Muntar/println/utils"
	"github.com/golang-jwt/jwt/v4"
	"golang.org/x/crypto/bcrypt"
)

const charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"

var seededRand *rand.Rand = rand.New(rand.NewSource(time.Now().UnixNano()))


var addJobObserver map[string]chan *models.Job


func init() {
	addJobObserver = map[string]chan *models.Job{}
}


// Signup is the resolver for the signup field.
func (r *mutationResolver) Signup(ctx context.Context, input model.NewUser) (*models.User, error) {
	bcryptPassword, err := bcrypt.GenerateFromPassword([]byte(input.Password), bcrypt.DefaultCost)
	if err != nil {
		return nil, err
	}
	user := models.User{
		Username: input.Username,
		Email:    input.Email,
		Password: string(bcryptPassword),
	}

	newUser := config.DB.Create(&user)
	if newUser.Error != nil {
		return nil, newUser.Error
	}
	return &user, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginUser) (*model.LoggedUser, error) {
	var user models.User

	config.DB.First(&user, "email = ?", input.Email)
	if user.Id == 0 {
		log.Fatal("User not found")
		// return {_, "User not found"}, nil
	}
	checkPass := bcrypt.CompareHashAndPassword([]byte(user.Password), []byte(input.Password))

	if checkPass != nil {
		log.Fatal("Password does not match")
	}
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{
		"sub": user.Id,
		"exp": time.Now().Add(time.Hour * 24 * 30).Unix(),
	})
	tokenString, err := token.SignedString([]byte(os.Getenv("JWT_SECRET")))
	if err != nil {
		log.Fatal("Ooops try again")
	}

	loggedUser := &model.LoggedUser{
		User:  &user,
		Token: tokenString,
	}

	return loggedUser, nil
}

// CreateJob is the resolver for the createJob field.
func (r *mutationResolver) CreateJob(ctx context.Context, input model.NewJob) (*models.Job, error) {
	// job := models.Job{
	// 	UserID:      input.UserID,
	// 	Description: *input.Description,
	// 	OnGoing:     input.OnGoing,
	// 	Completed:   input.Completed,
	// 	File:        input.File,
	// }

	// // newJob := config.DB.Create(&job)
	// // if newJob.Error != nil {
	// // 	return nil, newJob.Error
	// // }
	// // return &job, nil

	
	// // Save the job to the database
	// newJob := config.DB.Create(&job)
	// if newJob.Error != nil {
	// 	return nil, newJob.Error
	// }
	// for _, observer := range r.JobObservers {
    //     observer <- r.CreatedJob
    // }
	// r.CreatedJob = append(r.CreatedJob, &job)
    // r.mu.Lock()
	// // Send the job to the jobCreated channel
	// // r.Resolver.jobCreatedChan <- &job

	// return &job, nil
	job := models.Job{
		UserID:      input.UserID,
		Description: *input.Description,
		OnGoing:     input.OnGoing,
		Completed:   input.Completed,
		File:        input.File,
	}

	// Save the job to the database
	newJob := config.DB.Create(&job)
	if newJob.Error != nil {
		return nil, newJob.Error
	}

	// Send the job to the jobCreated channel
	// for _, observer := range r.JobObservers { 
	// 	r.JobObservers <- &job
	// // }

	// return &job, nil
	for _, observer := range addJobObserver {
		observer <- &job
	}
	return &job, nil
}

// DeleteJob is the resolver for the deleteJob field.
func (r *mutationResolver) DeleteJob(ctx context.Context, id int) ( string,  error){
	config.DB.Where("name = ?", "jinzhu").Delete(id)
return "Job deleted", nil
}

// UpdateJob is the resolver for the updateJob field.
func (r *mutationResolver) UpdateJob(ctx context.Context, id int, input model.NewJob) ( *models.Job,  error){
	job := models.Job{
	File:        input.File,
	Description: *input.Description,
}
config.DB.Model(&job).Where("id = ?", id).Updates(job)
return &job, nil
}

// ProcessFile is the resolver for the processFile field.
func (r *mutationResolver) ProcessFile(ctx context.Context, url string) ( *model.File,  error){
	file, err := ioutil.TempFile("", "uploaded.*")
if err != nil {
	log.Printf("Error saving uploaded file: %s\n", err.Error())
	return nil, err
}
defer os.Remove(file.Name())

_, err = file.Write([]byte(url))
if err != nil {
	log.Printf("Error writing uploaded file: %s\n", err.Error())
	return nil, err
}
numberofPages, _ := utils.ProcessPDF(file.Name())
price := float64(numberofPages) * 3.2
File := &model.File{
	URL:   url,
	Price: price,
}
// return processPDF(file.Name())
return File, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ( []*models.User,  error){
	var users []*models.User
config.DB.Find(&users)
return users, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id int) ( *models.User,  error){
	var user models.User
config.DB.First(&user, id)
return &user, nil
}

// Jobs is the resolver for the jobs field.
func (r *queryResolver) Jobs(ctx context.Context, first *int, after *string) (*model.JobResult, error) {
	panic(fmt.Errorf("not implemented: Jobs - jobs"))
}

// Job is the resolver for the job field.
func (r *queryResolver) Job(ctx context.Context, id int) ( *models.Job,  error){
	var job models.Job
config.DB.First(&job, id)
return &job, nil
}
// Placeholder is the resolver for the placeholder field.
func (r *queryResolver) Placeholder(ctx context.Context) (*string, error) {
	panic(fmt.Errorf("not implemented: Placeholder - placeholder"))
}

// CurrentTime is the resolver for the currentTime field.
func (r *subscriptionResolver) CurrentTime(ctx context.Context) ( <-chan *model.Time,  error){
	ch := make(chan *model.Time)

go func() {
	for {
		// In our example we'll send the current time every second.
		time.Sleep(1 * time.Second)
		fmt.Println("Tick")

		// Prepare your object.
		currentTime := time.Now()
		t := &model.Time{
			UnixTime:  int(currentTime.Unix()),
			TimeStamp: currentTime.Format(time.RFC3339),
		}

		// The subscription may have got closed due to the client disconnecting.
		// Hence we do send in a select block with a check for context cancellation.
		// This avoids goroutine getting blocked forever or panicking,
		select {
		case <-ctx.Done(): // This runs when context gets cancelled. Subscription closes.
			fmt.Println("Subscription Closed")
			// Handle deregistration of the channel here. `close(ch)`
			return // Remember to return to end the routine.

		case ch <- t: // This is the actual send.
			// Our message went through, do nothing
		}
	}
}()

// We return the channel and no error.
return ch, nil
}


// JobCreated is the resolver for the jobCreated field.
func (r *subscriptionResolver) JobCreated(ctx context.Context) (<-chan *models.Job, error) {
	id := generateRandomString(8)
	jobs := make(chan *models.Job, 1)

    go func() {
        <-ctx.Done()
		r.mu.Lock()
        delete(addJobObserver, id)
		r.mu.Unlock()
    }()

	r.mu.Lock()
    addJobObserver[id] = jobs
	r.mu.Unlock()

    return jobs, nil
}

func generateRandomString(length int) string {
	b := make([]byte, length)
	for i := range b {
	   b[i] = charset[seededRand.Intn(len(charset))]
	}
	return string(b)
 }

// Payload is the resolver for the payload field.
func (r *subscriptionResolver) Payload(ctx context.Context) (<-chan *string, error) {
	panic(fmt.Errorf("not implemented: Payload - payload"))
}

// Jobs is the resolver for the jobs field.
func (r *userResolver) Jobs(ctx context.Context, obj *models.User) ([]*models.Job, error) {
	panic(fmt.Errorf("not implemented: Jobs - jobs"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
type userResolver struct{ *Resolver }











